1st weeks:
   一、对象的导论
   1.抽象的过程：我们所能够解决问题的复杂性取决于抽象的类型和质量。
   抽象的类型：是指抽象的是什么。

   2.面向对象语言的五个特征：
   1） 万物皆对象、程序是对象的集合他们通过发送消息彼此相关联
   2）每个对象都具有自己的由其他对象所构成的所构成的存储、
   3）每个对象都拥有其类型、
   4）某一特定类型的所有对象都可以接受同样的消息

   我所理解的面向对象是继承、封装、多态这三大特征、不知道书中为什么列出的是这五大特征，
我想等以后编码水平提高了才能进一步理解书中的这几句话吧。

   3.复用的具体实现：
   1）最简单的复用某个类的方式是直接使用类的一个对象，将一个类的对象置于一个新的类中，
   被称之为创建"成员对象"
   2）任意类型的其他对象组合成新类想要的功能被称之为组合，如果组合是
   动态发生的，我们称之为"聚合"。组合是 has-a的关系
   3）组合中新类成员中的成员对象通常被声明为private

   4.继承：当创建完一个新类的时候，即使另一个新类与其具有相同的功能，还是创建一个新的类，
   以现有类为基础复制他、然后通过添加和修改这个副本来创建新的类
   类型不仅仅是描述作用一个对象集合的约束条件、同时还有与其他类型之间的关系。
   两个类型可以有相同的特性和行为，其中一个类型可能比另一个含有更多特性。
   继承使用基类和导出类的概念表示了这种类型之间的相似性。
   一个基类包含导出类的所共享的特性和行为。

   5.单根继承：
   在单根继承结构中的所有对象都具有一个公共接口，他们归根到底都是相同的基本类型。
   单根继承保证所有对象都具有某些功能。

   二、一切都是对象
   1.用引用操作对象
   操作标识符实际上是一个对象的引用，引用和对象的关系就如电视和遥控器的关系。
   String s 这里只是引用不是对象。
   一单创建一个引用就希望他与一个新的对象相关联，用关键字new来实现与新的对象相关联。
   
   2.存储到什么地方
   1）寄存器：是最快的存储区域位于处理器的内部，无法进行操控
   2）堆栈：位于Ram中，若堆栈的指针向下移动分配新的内存，向上移动则释放内存，对象的引用
   存储在堆栈当中。
   3)当需要一个对象时。用new写一行简单的代码执行代码会自动在堆里分配内存。
   4）常量存储：常量值通常存放在代码内部，这样做是安全的因为他永远不会改变，可以选择将
   常量存储在rom中
    
   2 weeks:
      1.接口的本质：
      对象可以看作是某种数据类型，但是并不能反映出对象以及操作对象的本质。
      我们实际关心的不是对象的类型，而是对象的能力。
      比如：计算一组数字 我们不关心是用计算器计算还是算盘，关心的是对象计算的能力。

      1）所以类型并不重要，重要的是能力，接口就可以用来表示能力。

      2）接口声明了一组能力，但自身并没有实现这个能力，它只是作为一种约定。

      3）接口涉及交互两方对象，一方需要实现这个接口，另一方需要使用这个接口，对象之间
      并不互相依赖，它们只是通过接口进行交互。

      4）类实现接口，表示类的对象具有接口所表示的能力。

      5）接口重要的地方在于它降低了耦合提高了灵活性。使用接口的代码依赖的是接口本身，而非接口的具体类型。
      程序完全可以根据情况替换接口的实现，而不影响接口使用者，
      6)解决复杂问题的关键是分而治之，将复杂的大问题分解为小问题，分解的核心就是要降低耦合。
       
      2.接口的细节
      1）接口中可以定义变量，例如：
      public interface Interface1{
         public static final int a = 0;
      }
      变量可以通过接口名 Interface1.a来使用

      2）接口也可以继承
      与类不同的是，接口可以有多个父接口

      总结：针对接口不仅可以复用代码也可以降低耦合提高代码的灵活性

      3.抽象类
      1）抽象是相对于具体而言，具体类有直接相应的对象，而抽象类没有。
      2）抽象方法也只有声明并没有实现
      3）抽象类不能创建对象，要创建对象必须使用它的具体字类。
      例如：
     Shape shape = new Circle();
     Shape 是类型Shape类型的变量，引用了具体字类Circle的对象。

     4.为什么需要抽象类
     1）在编写程序时每个人都可能会犯错，减少错误不能依赖个人的优秀素质
     还需要一些机制，使得一个普通人都把容易得事做对，而难以把事情做错。
     抽象类引导使用者正确使用它们，减少误用，使用抽象方法而非空方法体。
     使用抽象类，类的使用者创建对象的时候必须要使用某个具体的字类，而不可能误用不完整的父类。


      
